import{e as defineComponent,c as computed,f as openBlock,p as createBlock,w as withCtx,q as mergeProps,u as unref,j as renderSlot,m as createBaseVNode,s as normalizeProps,v as guardReactiveProps,k as createTextVNode,t as toDisplayString,n as normalizeClass,x as createVNode,l as createCommentVNode}from"./vue.esm-bundler-9Sp9mUIa.js";import{f as formSelectProps,u as useFormSelect}from"./index-uJ8py8ti.js";import{d as dropdownProps,b as _sfc_main$1,_ as _sfc_main$2}from"./Dropdown-cQ0zt6oJ.js";import{e as extractKeysFrom}from"./index-VgYwC9pf.js";import{u as useClasses}from"./index-tXmoVe_N.js";const{disabled:disabledProp,size:sizeProp}=formSelectProps,_sfc_main=defineComponent({__name:"FormDropdown",props:{...dropdownProps,disabled:disabledProp,labelKey:{type:String,default:"label"},menuClass:{type:String,default:"w-100"},modelValue:{type:Object,default:void 0},placeholder:{type:String,default:"Select"},size:sizeProp,toggleClass:{type:String,default:void 0}},emits:["update:modelValue"],setup(__props,{emit:__emit}){const props=__props,emit=__emit,propsDropdown=extractKeysFrom(Object.keys(dropdownProps),props),label=computed(()=>props.modelValue?props.modelValue[props.labelKey]:props.placeholder),{classes}=useClasses(computed(()=>[...useFormSelect(props).classes.value,props.toggleClass]));return(_ctx,_cache)=>(openBlock(),createBlock(unref(_sfc_main$2),mergeProps({class:"form-dropdown"},unref(propsDropdown),{"onClick:item":_cache[0]||(_cache[0]=$event=>emit("update:modelValue",$event))}),{dropdownToggle:withCtx(()=>[renderSlot(_ctx.$slots,"dropdownToggle",{},()=>[createBaseVNode("div",{class:normalizeClass(["form-select",unref(classes)]),"data-bs-toggle":"dropdown"},[renderSlot(_ctx.$slots,"dropdownToggleLabel",normalizeProps(guardReactiveProps({label:label.value,modelValue:__props.modelValue})),()=>[createTextVNode(toDisplayString(label.value),1)])],2)])]),prepend:withCtx(()=>[_ctx.items.length===0?renderSlot(_ctx.$slots,"noOptions",{key:0},()=>[createVNode(unref(_sfc_main$1),{class:"pe-none",label:"No options"})]):createCommentVNode("",!0),renderSlot(_ctx.$slots,"prepend")]),items:withCtx(slotScope=>[renderSlot(_ctx.$slots,"items",normalizeProps(guardReactiveProps(slotScope)))]),item:withCtx(slotScope=>[renderSlot(_ctx.$slots,"item",normalizeProps(guardReactiveProps(slotScope)))]),append:withCtx(slotScope=>[renderSlot(_ctx.$slots,"append",normalizeProps(guardReactiveProps(slotScope)))]),_:3},16))}});_sfc_main.__docgenInfo={exportName:"default",displayName:"FormDropdown",docsBlocks:[`\`\`\`vue
<FormDropdown :items="[Item]" />
\`\`\`

## Imported Props

| Prop name | Description                                    | Type                                             | Values | Default   |
| --------- | ---------------------------------------------- | ------------------------------------------------ | ------ | --------- |
| items     | The items of the dropdown menu                 | [Item[]](../../composables/useDropdownItems)     | -      | () => []  |
| menuClass | The classes that will be forwarded to the menu | \`string\`\\|\`array\`\\|\`object\`                      | -      | undefined |
| size      | The size of the component                      | [Size](../../composables/useSize) (string)       | -      | 'md'      |
| variant   | The variant of the component                   | [Variant](../../composables/useVariant) (string) | -      | 'primary' |`],description:"",tags:{},props:[{name:"disabled",description:"Disables the component",type:{name:"disabledProp"}},{name:"labelKey",description:"The key that is used to get the label from a given item",type:{name:"string"},defaultValue:{func:!1,value:"'label'"}},{name:"menuClass",description:"The classes that will be forwarded to the menu",type:{name:"string"},defaultValue:{func:!1,value:"'w-100'"}},{name:"modelValue",description:"The model value",type:{name:"object"},defaultValue:{func:!1,value:"undefined"}},{name:"placeholder",description:"The placeholder of the dropdown",type:{name:"string"},defaultValue:{func:!1,value:"'Select'"}},{name:"size",type:{name:"sizeProp"}},{name:"toggleClass",description:"The classes that will be forwarded to the toggle",type:{name:"string"},defaultValue:{func:!1,value:"undefined"}}],events:[{name:"update:modelValue",description:"Fired when the model value is updated",properties:[{type:{names:["any"]},name:"value",description:"The new value"}],tags:[{title:"param",type:{name:"any"},name:"value",description:"The new value"}]}],slots:[{name:"dropdownToggle",description:"Displays the dropdown toggle"},{name:"dropdownToggleLabel",scoped:!0,description:"Displays the dropdown toggle label",bindings:[{name:"label",title:"binding"},{name:"modelValue",title:"binding"}]},{name:"noOptions",description:"Displays content when there are no options"},{name:"prepend",description:"Prepends the dropdown options"},{name:"items",scoped:!0,description:"*Forwarded to child*",bindings:[]},{name:"item",scoped:!0,description:"*Forwarded to child*",bindings:[]},{name:"append",scoped:!0,description:"*Forwarded to child*",bindings:[]}],sourceFiles:["/home/runner/work/bootstrap-vue/bootstrap-vue/src/components/FormDropdown/FormDropdown.vue"]};export{_sfc_main as _};
