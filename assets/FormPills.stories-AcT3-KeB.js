import{e as defineComponent,r as ref,c as computed,y as watch,f as openBlock,g as createElementBlock,m as createBaseVNode,F as Fragment,C as renderList,t as toDisplayString,D as withDirectives,I as vModelText}from"./vue.esm-bundler-9Sp9mUIa.js";import{i as idProps}from"./index-AceVrLog.js";const _hoisted_1=["for"],_hoisted_2={class:"list-unstyled d-flex align-content-start flex-wrap mb-0"},_hoisted_3={class:"form-pill-text"},_hoisted_4=["onClick"],_hoisted_5={class:"form-pill-input-item"},_hoisted_6={class:"form-pill-input-sizer overflow-hidden"},_hoisted_7=["id","placeholder"],_sfc_main=defineComponent({__name:"FormPills",props:{editItemOnBackspace:{type:Boolean,default:!1},...idProps,maxItems:{type:Number,default:1/0},modelValue:{type:Array,default:()=>[]},placeholder:{type:String,default:""},separator:{type:[String,RegExp],default:/[\s\n]+/},submitKeys:{type:Array,default:()=>["Enter"]},valueMatcher:{type:[String,RegExp],default:/^.+$/}},emits:["update:modelValue"],setup(__props,{emit:__emit}){const props=__props,emit=__emit,value=ref(""),clearValue=()=>value.value="",items=computed({get:()=>props.modelValue,set:v=>emit("update:modelValue",v)}),maxItemsReached=computed(()=>items.value.length>=props.maxItems),matchItem=item=>!!item.match(props.valueMatcher),splitItem=item=>item.split(props.separator),removeItem=index=>items.value.splice(index,1),validateValue=value2=>Array.isArray(value2)?value2.every(validateValue):matchItem(value2),addItem=item=>{if(maxItemsReached.value)return!1;const newItems=splitItem(item).filter(matchItem);if(newItems.length===0)return!1;const allowedItems=newItems.slice(0,props.maxItems-items.value.length);return items.value=items.value.concat(allowedItems),!0};watch(value,v=>{const splitItems=splitItem(v);splitItems.length>1&&splitItems.filter(validateValue).length===splitItems.filter(v2=>v2!=="").length&&(addItem(v),clearValue())});const blur=event=>{const splitItems=splitItem(value.value);validateValue(splitItems)&&(addItem(value.value),clearValue())},keydown=event=>{if(event.code==="Backspace"){if(value.value!=="")return;const[removedItem]=removeItem(items.value.length-1);props.editItemOnBackspace&&removedItem&&(value.value=removedItem,event.preventDefault());return}if(maxItemsReached.value){event.preventDefault();return}if(props.submitKeys.includes(event.code)){const splitItems=splitItem(value.value);validateValue(splitItems)&&(addItem(value.value),clearValue()),event.preventDefault()}},paste=event=>{event.preventDefault();const pasteValue=event.clipboardData.getData("text");if(!pasteValue)return;const newValue=value.value+pasteValue,splitItems=splitItem(newValue);validateValue(splitItems)?(addItem(newValue),clearValue()):value.value=newValue};return(_ctx,_cache)=>(openBlock(),createElementBlock("label",{class:"form-control",for:_ctx.id},[createBaseVNode("ul",_hoisted_2,[(openBlock(!0),createElementBlock(Fragment,null,renderList(__props.modelValue,(item,i)=>(openBlock(),createElementBlock("li",{key:i,class:"form-pill d-inline-flex align-items-center mw-100"},[createBaseVNode("div",_hoisted_3,toDisplayString(item),1),createBaseVNode("div",{class:"form-pill-remove",onClick:$event=>removeItem(i)},null,8,_hoisted_4)]))),128)),createBaseVNode("li",_hoisted_5,[createBaseVNode("div",_hoisted_6,toDisplayString(value.value),1),withDirectives(createBaseVNode("input",{id:_ctx.id,"onUpdate:modelValue":_cache[0]||(_cache[0]=$event=>value.value=$event),class:"form-pill-input w-100",type:"text",placeholder:items.value.length?"":__props.placeholder,onBlur:_cache[1]||(_cache[1]=$event=>blur()),onKeydown:_cache[2]||(_cache[2]=$event=>keydown($event)),onPaste:_cache[3]||(_cache[3]=$event=>paste($event))},null,40,_hoisted_7),[[vModelText,value.value]])])])],8,_hoisted_1))}});_sfc_main.__docgenInfo={exportName:"default",displayName:"FormPills",docsBlocks:[`\`\`\`vue
<FormPills
    v-model="emails"
    :value-matcher="/.+@.+\\.\\w+/"
/>
\`\`\`

## Imported Props

| Prop name | Description                   | Type   | Values | Default |
| --------- | ----------------------------- | ------ | ------ | ------- |
| id        | The id used for the component | string | -      | \`uuid\`  |`],description:"",tags:{},props:[{name:"editItemOnBackspace",description:"Defines if items should be removed when pressing backspace",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"maxItems",description:"The maximym amount of items that can be added to the list",type:{name:"number"},defaultValue:{func:!1,value:"Infinity"}},{name:"modelValue",description:"The model value",type:{name:"string[]"},defaultValue:{func:!0,value:"() => []"}},{name:"placeholder",description:"The placeholder for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"separator",description:"The separator that checks if an item should be separated from the next one",type:{name:"string|RegExp"},defaultValue:{func:!1,value:"/[\\s\\n]+/"}},{name:"submitKeys",description:"The key to press to submit an item",type:{name:"string[]"},defaultValue:{func:!0,value:"() => ['Enter']"}},{name:"valueMatcher",description:"The matcher to check if an item is valid",type:{name:"string|RegExp"},defaultValue:{func:!1,value:"/^.+$/"}}],events:[{name:"update:modelValue",description:"Fired when the model value is updated",properties:[{type:{names:["string[]"]},name:"value",description:"The new value"}],tags:[{title:"param",type:{name:"string[]"},name:"value",description:"The new value"}]}],sourceFiles:["/home/runner/work/bootstrap-vue/bootstrap-vue/src/components/FormPills/FormPills.vue"]};const FormPills_stories={title:"Forms/Form pills",component:_sfc_main,argTypes:{editItemOnBackspace:{control:{type:"boolean"}},maxItems:{control:{type:"number"}},placeholder:{control:{type:"text"}},valueMatcher:{control:{type:"text"}}}},template=args=>({components:{FormPills:_sfc_main},setup:()=>({args,value:ref([])}),template:'<FormPills v-model="value" v-bind="args" />'}),Default=template.bind({});var _a,_b,_c;Default.parameters={...Default.parameters,docs:{...(_a=Default.parameters)==null?void 0:_a.docs,source:{originalSource:`args => ({
  components: {
    FormPills
  },
  setup: () => ({
    args,
    value: ref([])
  }),
  template: '<FormPills v-model="value" v-bind="args" />'
})`,...(_c=(_b=Default.parameters)==null?void 0:_b.docs)==null?void 0:_c.source}}};const __namedExportsOrder=["Default"];export{Default,__namedExportsOrder,FormPills_stories as default};
